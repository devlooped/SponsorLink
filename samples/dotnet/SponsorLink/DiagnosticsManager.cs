// <autogenerated />
#nullable enable
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.ComponentModel.Design;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Security.Claims;
using Humanizer;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;

namespace Devlooped.Sponsors;

class DiagnosticsManager
{
    ConcurrentDictionary <string, Diagnostic> Diagnostics
    {
        get => AppDomainDictionary.Get<ConcurrentDictionary<string, Diagnostic>>(nameof(Diagnostics));
    }

    public DiagnosticDescriptor[] GetDescriptors(string[] sponsorable, string product, string prefix) => new[]
    {
        GetDescriptor(sponsorable, product, prefix, DiagnosticKind.Unknown),
        GetDescriptor(sponsorable, product, prefix, DiagnosticKind.Sponsor),
        GetDescriptor(sponsorable, product, prefix, DiagnosticKind.Expiring),
        GetDescriptor(sponsorable, product, prefix, DiagnosticKind.Expired),
    };

    public DiagnosticDescriptor GetDescriptor(string[] sponsorable, string product, string prefix, DiagnosticKind kind) => kind switch
    {
        DiagnosticKind.NonEditor => CreateNonEditor(sponsorable, prefix),
        DiagnosticKind.DesignTimeBuild => CreateDesignTimeBuild(prefix),
        DiagnosticKind.Unknown => CreateUnknown(sponsorable, product, prefix),
        DiagnosticKind.Sponsor => CreateSponsor(sponsorable, prefix),
        DiagnosticKind.Expiring => CreateExpiring(sponsorable, prefix),
        DiagnosticKind.Expired => CreateExpired(sponsorable, prefix),
        _ => throw new NotImplementedException(),
    };

    public Diagnostic Push(string product, Diagnostic diagnostic)
    {
        // Directly sets, since we only expect to get one warning per sponsorable+product 
        // combination.
        Diagnostics[product] = diagnostic;
        return diagnostic;
    }

    public Diagnostic? Pop(string product)
    {
        Diagnostics.TryRemove(product, out var diagnostic);
        return diagnostic;
    }

    public DiagnosticKind? GetStatus(string product)
    {
        if (Diagnostics.TryGetValue(product, out var diagnostic) &&
            diagnostic.Properties.TryGetValue(nameof(DiagnosticKind), out var value))
        {
            // Switch on value matching DiagnosticKind names
            return value switch
            {
                nameof(DiagnosticKind.NonEditor) => DiagnosticKind.NonEditor,
                nameof(DiagnosticKind.DesignTimeBuild) => DiagnosticKind.DesignTimeBuild,
                nameof(DiagnosticKind.Unknown) => DiagnosticKind.Unknown,
                nameof(DiagnosticKind.Sponsor) => DiagnosticKind.Sponsor,
                nameof(DiagnosticKind.Expiring) => DiagnosticKind.Expiring,
                nameof(DiagnosticKind.Expired) => DiagnosticKind.Expired,
                _ => null,
            };
        }

        return null;
    }

    public bool TryPeek(string product, [NotNullWhen(true)] out Diagnostic? diagnostic)
        => Diagnostics.TryGetValue(product, out diagnostic);

    static DiagnosticDescriptor CreateNonEditor(string[] sponsorable, string prefix) => new(
        $"{prefix}098",
        nameof(DiagnosticKind.NonEditor), nameof(DiagnosticKind.NonEditor), "SponsorLink",
        DiagnosticSeverity.Hidden, true, customTags: nameof(DiagnosticKind.NonEditor));

    static DiagnosticDescriptor CreateDesignTimeBuild(string prefix) => new(
        $"{prefix}099",
        nameof(DiagnosticKind.DesignTimeBuild), nameof(DiagnosticKind.DesignTimeBuild), "SponsorLink",
        DiagnosticSeverity.Hidden, true, customTags: nameof(DiagnosticKind.DesignTimeBuild));

    static DiagnosticDescriptor CreateSponsor(string[] sponsorable, string prefix) => new(
        $"{prefix}100",
        ThisAssembly.Strings.Sponsor.Title,
        ThisAssembly.Strings.Sponsor.MessageFormat,
        "SponsorLink",
        DiagnosticSeverity.Info,
        isEnabledByDefault: true,
        description: ThisAssembly.Strings.Sponsor.Description,
        helpLinkUri: ThisAssembly.Git.Url,
        "DoesNotSupportF1Help");

    static DiagnosticDescriptor CreateUnknown(string[] sponsorable, string product, string prefix) => new(
        $"{prefix}101",
        ThisAssembly.Strings.Unknown.Title,
        ThisAssembly.Strings.Unknown.MessageFormat,
        "SponsorLink",
        DiagnosticSeverity.Warning,
        isEnabledByDefault: true,
        description: ThisAssembly.Strings.Unknown.Description(product,
            sponsorable.Humanize(),
            sponsorable.Humanize(x => $"https://github.com/sponsors/{x}"),
            string.Join(" ", sponsorable)),
        helpLinkUri: "https://www.devlooped.com/SponsorLink/",
        WellKnownDiagnosticTags.NotConfigurable);

    static DiagnosticDescriptor CreateExpiring(string[] sponsorable, string prefix) => new(
         $"{prefix}103",
         ThisAssembly.Strings.Expiring.Title,
         ThisAssembly.Strings.Expiring.MessageFormat,
         "SponsorLink",
         DiagnosticSeverity.Warning,
         isEnabledByDefault: true,
         description: ThisAssembly.Strings.Expiring.Description(string.Join(" ", sponsorable)),
         helpLinkUri: "https://www.devlooped.com/SponsorLink/github.html#auto-sync",
         "DoesNotSupportF1Help", WellKnownDiagnosticTags.NotConfigurable);

    static DiagnosticDescriptor CreateExpired(string[] sponsorable, string prefix) => new(
         $"{prefix}104",
         ThisAssembly.Strings.Expired.Title,
         ThisAssembly.Strings.Expired.MessageFormat,
         "SponsorLink",
         DiagnosticSeverity.Warning,
         isEnabledByDefault: true,
         description: ThisAssembly.Strings.Expired.Description(string.Join(" ", sponsorable)),
         helpLinkUri: "https://www.devlooped.com/SponsorLink/github.html#auto-sync",
         "DoesNotSupportF1Help", WellKnownDiagnosticTags.NotConfigurable);
}
