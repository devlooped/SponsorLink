// <autogenerated />
#nullable enable
using System.Reflection;

namespace Devlooped.Sponsors;

partial class SponsorLink
{
    public enum  Status
    {
        NonEditor,
        DesignTimeBuild,
        Unknown,
        Sponsor,
        Expiring,
        Expired,
    }

    static readonly Dictionary<string, string> sponsorables = typeof(SponsorLink).Assembly
        .GetCustomAttributes<AssemblyMetadataAttribute>()
        .Where(x => x.Key.StartsWith("Funding.GitHub."))
        .Select(x => new { Key = x.Key.Substring(15), Value = x.Value })
        .ToDictionary(x => x.Key, x => x.Value);

    /// <summary>
    /// Whether the current process is running in an IDE, either 
    /// <see cref="IsVisualStudio"/> or <see cref="IsRider"/>.
    /// </summary>
    public static bool IsEditor => IsVisualStudio || IsRider;

    /// <summary>
    /// Whether the current process is running as part of an active Visual Studio instance.
    /// </summary>
    public static bool IsVisualStudio =>
        Environment.GetEnvironmentVariable("ServiceHubLogSessionKey") != null ||
        Environment.GetEnvironmentVariable("VSAPPIDNAME") != null;

    /// <summary>
    /// Whether the current process is running as part of an active Rider instance.
    /// </summary>
    public static bool IsRider =>
        Environment.GetEnvironmentVariable("RESHARPER_FUS_SESSION") != null ||
        Environment.GetEnvironmentVariable("IDEA_INITIAL_DIRECTORY") != null;

    public static Dictionary<string, string> Sponsorables => sponsorables;

    /// <summary>
    /// Manages the sharing and reporting of diagnostics across the source generator 
    /// and the diagnostic analyzer, to avoid doing the online check more than once.
    /// </summary>
    public static DiagnosticsManager Diagnostics { get; } = new();
}
