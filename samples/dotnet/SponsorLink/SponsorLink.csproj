<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Product>SponsorLink</Product>
    <ImplicitUsings>disable</ImplicitUsings>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <CoreCompileDependsOn>CoreResGen;$(CoreCompileDependsOn)</CoreCompileDependsOn>
    <FundingPackageId>SponsorLink</FundingPackageId>
  </PropertyGroup>

  <PropertyGroup Label="SponsorLink">
    <!-- Default funding product the Product, which already part of ThisAssembly -->
    <FundingProduct Condition="'$(FundingProduct)' == ''">$(Product)</FundingProduct>
    <FundingPackageId Condition="'$(FundingPackageId)' == ''">$(PackageId)</FundingPackageId>
    <!-- Default prefix is the joined upper-case letters in the product name (i.e. for ThisAssembly, TA) -->
    <FundingPrefix Condition="'$(FundingPrefix)' == ''">$([System.Text.RegularExpressions.Regex]::Replace("$(FundingProduct)", "[^A-Z]", ""))</FundingPrefix>
    <!-- Default grace days for an expired sponsor manifest -->
    <FundingGrace Condition="'$(FundingGrace)' == ''">21</FundingGrace>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Humanizer.Core" Version="2.14.1" />
    <PackageReference Include="Humanizer.Core.es" Version="2.14.1" />
    <PackageReference Include="ILRepack" Version="2.0.33" PrivateAssets="all" />
    <PackageReference Include="NuGetizer" Version="1.2.2" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.0.1" Pack="false" />
    <PackageReference Include="PolySharp" Version="1.14.1" PrivateAssets="all" />
    <PackageReference Include="Microsoft.IdentityModel.JsonWebTokens" Version="7.6.2" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources.es.resx" ManifestResourceName="Devlooped.Sponsors.%(Filename)" />
    <EmbeddedResource Update="Resources.resx" ManifestResourceName="Devlooped.Sponsors.%(Filename)" StronglyTypedManifestPrefix="Devlooped.Sponsors" StronglyTypedClassName="%(Filename)" StronglyTypedNamespace="Devlooped.Sponsors" StronglyTypedLanguage="$(Language)" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\SponsorLink.Analyzer.targets" Link="SponsorLink.Analyzer.targets" />
  </ItemGroup>

  <Target Name="EmitFunding" BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun" Inputs="$(MSBuildAllProjects)" Outputs="$(IntermediateOutputPath)SponsorLink.g.cs">
    <Warning Condition="'$(FundingPackageId)' == ''" Code="SL001" Text="Could not determine value of FundingPackageId (defaulted to PackageId). Defaulting it to FundingProduct ('$(FundingProduct)'). Make sure this matches the containing package id, or set an explicit value." />
    <PropertyGroup>
      <!-- Default to Product, which is most common for single-package products (i.e. Moq) -->
      <FundingPackageId Condition="'$(FundingPackageId)' == ''">$(FundingProduct)</FundingPackageId>
      <SponsorLinkPartial>namespace Devlooped.Sponsors%3B

partial class SponsorLink
{
    public partial class Funding
    {
        public const string PackageId = "$(FundingPackageId)"%3B
        public const string Product = "$(FundingProduct)"%3B
        public const string Prefix = "$(FundingPrefix)"%3B
        public const int Grace = $(FundingGrace)%3B
    }
}
</SponsorLinkPartial>
    </PropertyGroup>
    <WriteLinesToFile File="$(IntermediateOutputPath)SponsorLink.g.cs" Lines="$(SponsorLinkPartial)" WriteOnlyWhenDifferent="true" Overwrite="true" />
    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)SponsorLink.g.cs" />
    </ItemGroup>
  </Target>

  <!-- Keep in sync with ..\SponsorLink.Analyzer.targets -->
  <Target Name="DownloadDevloopedJwk" BeforeTargets="GetAssemblyAttributes" Inputs="$(MSBuildProjectFullPath)" Outputs="$(MSBuildProjectDirectory)\$(BaseIntermediateOutputPath)devlooped.jwk">
    <Exec Command="pwsh --version" ContinueOnError="true" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="PwshExitCode" />
    </Exec>
    <Exec Command="jq --version" ContinueOnError="true" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="JqExitCode" />
    </Exec>
    <Exec Command="curl --version" ContinueOnError="true" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="CurlExitCode" />
    </Exec>

    <PropertyGroup>
      <JwkDownload Condition="'$(PwshExitCode)' != '0' or  '$(JqExitCode)' != '0'">true</JwkDownload>
      <CurlDownload Condition="'$(CurlExitCode)' == '0'">true</CurlDownload>
    </PropertyGroup>

    <!-- Special case for Windows with no curl (and no pwsh/jq), super legacy -->
    <Exec Command="powershell -nop -C &quot;invoke-restmethod https://sponsorlink.devlooped.com/jwk -outfile $(MSBuildProjectDirectory)\$(BaseIntermediateOutputPath)devlooped.jwk&quot;" 
          EchoOff="true" 
          Condition="'$(JwkDownload)' == 'true' and '$(CurlDownload)' != '0'" />

    <!-- General JWK download case for all OSes, when no pwsh/jq is available -->
    <Exec Command="curl --output $(MSBuildProjectDirectory)\$(BaseIntermediateOutputPath)devlooped.jwk https://sponsorlink.devlooped.com/jwk"
          EchoOff="true"
          Condition="'$(JwkDownload)' == 'true' and '$(CurlDownload)' == '0'" />

    <!-- Base case when pwsh+jq are available, download from github -->
    <Exec Command="pwsh -NonInteractive -NoProfile -File '$(MSBuildThisFileDirectory)jwk.ps1'"
          Condition="'$(JwkDownload)' != 'true'" 
          ConsoleToMSBuild="true" 
          EchoOff="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="RawJwk" />
      <Output TaskParameter="ExitCode" PropertyName="MSBuildLastExitCode" />
    </Exec>
    <Error Text="$(RawJwk)" Condition="'$(JwkDownload)' != 'true' and '$(MSBuildLastExitCode)' != '0'" />
    <WriteLinesToFile File="$(MSBuildProjectDirectory)\$(BaseIntermediateOutputPath)devlooped.jwk" 
                      Lines="$(RawJwk)" 
                      Overwrite="true" 
                      Condition="'$(JwkDownload)' != 'true'" />
  </Target>

  <Target Name="ReadDevloopedJwk" DependsOnTargets="DownloadDevloopedJwk" BeforeTargets="GetAssemblyAttributes">
    <PropertyGroup>
      <!-- Read public key we validate manifests against -->
      <DevloopedJwk>$([System.IO.File]::ReadAllText('$(MSBuildProjectDirectory)\$(BaseIntermediateOutputPath)devlooped.jwk'))</DevloopedJwk>
    </PropertyGroup>
    <ItemGroup>
      <AssemblyMetadata Include="Funding.GitHub.devlooped" Value="$(DevloopedJwk)" />
    </ItemGroup>
  </Target>

</Project>
