<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FirstRun_Accept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="FirstRun_Acceptance" xml:space="preserve">
    <value>[lime]?[/] [white]Do you accept the above conditions?[/]</value>
  </data>
  <data name="FirstRun_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="FirstRun_Welcome" xml:space="preserve">
    <value>Welcome to SponsorLink</value>
  </data>
  <data name="FirstRun_What" xml:space="preserve">
    <value>SponsorLink is a manifest-based (JWTs) mechanism for synchronizing your sponsorships to your local machine. This allows package authors that leverage SponsorLink to provide selective functionality to sponsors, whether individual or organization-wide.</value>
    <comment>What</comment>
  </data>
  <data name="FirstRun_How" xml:space="preserve">
    <value>As a GitHub CLI extension, [italic]gh-sponsors[/] leverages your authenticated user to locate your personal sponsorships, as well as your organizations' and your OSS community contributions. It does this entirely locally with no intermediaries, communicating exclusively with the GitHub API itself.

This information is then used to discover GitHub sponsors accounts that have opted-in to use SponsorLink, by looking up their sponsorable JWT manifest, such as [link=https://github.com/devlooped/.github/blob/main/sponsorlink.jwt][blue]https://github.com/[/][dim][[user/org]][/][blue]/.github/sponsorlink.jwt[/][/]. If the manifest is present, the extension will:

:backhand_index_pointing_right: read from the manifest the issuer URI, public key and GitHub OAuth client (app) ID
:backhand_index_pointing_right: request GitHub OAuth app authorization via the default browser to get a limited acccess token
   :eyes: you should read the permissions requested by the sponsor account's GitHub app carefully
   :check_mark_button: you can revoke these permissions at any time at [link]https://github.com/settings/applications[/]
:backhand_index_pointing_right: issue a GET request with that limited token to [blue][[issuer URI]]/sync[/] and get a sponsor JWT manifest 
   :eyes: the backend will only have access to the information you authorized
:backhand_index_pointing_right: verify and save sponsor JWT manifest locally for later offline access and validation by libraries and tools

You can also inspect the JWT of both the sponsorable account and your sponsor manifest using [link]https://jwt.io/[/], for example. 
Both are persisted under [blue]~/.sponsorlink[/] ([blue]%userprofile%\.sponsorlink[/] on Windows).

This manifest needs to be sync'ed and downloaded once a month, which is the only point at which each SponsorLink backend computes, signs your sponsorship token and sets a new expiration date.

Learn more about SponsorLink at [link]https://www.devlooped.com/SponsorLink/[/].</value>
    <comment>How</comment>
  </data>
  <data name="FirstRun_HowTitle" xml:space="preserve">
    <value>How it works</value>
  </data>
  <data name="FirstRun_Privacy" xml:space="preserve">
    <value>SponsorLink is build by developers for developers. As such, we don't have an attorney or a big corporation backing this. If you're running this tool, it's likely because you are currently sponsoring or considering sponsoring the developer of a package you enjoy.

The short story is: 
:backhand_index_pointing_right: sponsorship manifests are purely local and offline :check_mark_button: no info persisted in the cloud
:backhand_index_pointing_right: the backend uses a limited GitHub OAuth app token  :check_mark_button: only email(s) and organization membership determine sponsorships
:backhand_index_pointing_right: you can be a direct or indirect supporter/sponsor  :purple_heart: direct sponsorship, via an organization or project contributions 

Code for the backend as well as this CLI extension are [link=https://www.devlooped.com/SponsorLink/]open source[/]. Please read the [link=https://github.com/devlooped/SponsorLink/blob/main/privacy.md]full privacy policy[/] to learn more.</value>
    <comment>Privacy</comment>
  </data>
  <data name="FirstRun_PrivacyTitle" xml:space="preserve">
    <value>Privacy policy</value>
  </data>
  <data name="FirstRun_SyncNow" xml:space="preserve">
    <value>[lime]?[/] [white]Do you want to sync your sponsor manifests now?[/]</value>
  </data>
  <data name="GitHub_Login" xml:space="preserve">
    <value>[lime]?[/] [white]Do you want to log into the GitHub CLI?[/]</value>
  </data>
  <data name="GitHub_UserScope" xml:space="preserve">
    <value>[lime]?[/] [white]Allow read-access to your GitHub account email address(es)?[/] (Required for manifest generation)</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Remove_AuthenticationRequired" xml:space="preserve">
    <value>[red]x[/] Removal of user data requires an authenticated user.</value>
  </data>
  <data name="Remove_Deleted" xml:space="preserve">
    <value>[green]✓[/] Deleted authenticated user from backend</value>
  </data>
  <data name="Remove_Deleting" xml:space="preserve">
    <value>Requesting removal of all user data ...</value>
  </data>
  <data name="Remove_ReportIssue" xml:space="preserve">
    <value>[red]x[/] Failed to remove user data. Please report the issue at [link]https://github.com/devlooped/SponsorLink/issues/new[/]</value>
  </data>
  <data name="Session_OpenBrowser" xml:space="preserve">
    <value>[lime]?[/] Operation requires authentication on github.com. Open your browser now?</value>
  </data>
  <data name="Sync_ConsiderSponsoring" xml:space="preserve">
    <value>:folded_hands: [yellow]{sponsorable}[/]: consider sponsoring at {links}</value>
  </data>
  <data name="Sync_DetectingManifest" xml:space="preserve">
    <value>Detecting SponsorLink manifest for [yellow]{sponsorable}[/]</value>
  </data>
  <data name="Sync_Failed" xml:space="preserve">
    <value>:cross_mark: [yellow]{sponsorable}[/] failed to sync status</value>
  </data>
  <data name="Sync_FetchingManifests" xml:space="preserve">
    <value>Fetching SponsorLink manifests for {count} accounts</value>
  </data>
  <data name="Sync_InteractiveAuthNeeded" xml:space="preserve">
    <value>[lime]?[/] {count} sponsorable accounts require [link=https://www.devlooped.com/SponsorLink/github.html#authentication][blue]interactive authentication[/][/] for synchronization. Do you want to Proceed?</value>
  </data>
  <data name="Sync_InteractiveAuthNeeded1" xml:space="preserve">
    <value>[lime]?[/] Sponsors account [yellow]{account}[/] requires [link=https://www.devlooped.com/SponsorLink/github.html#authentication][blue]interactive authentication[/][/] for synchronization. Do you want to Proceed?</value>
  </data>
  <data name="Sync_InvalidManifest" xml:space="preserve">
    <value>:cross_mark: [yellow]{sponsorable}[/] provided an invalid SponsorLink manifest ({status})</value>
  </data>
  <data name="Sync_QueryingOrgPublicSponsorships" xml:space="preserve">
    <value>Querying [yellow]{org}[/] sponsorships</value>
  </data>
  <data name="Sync_QueryingUserOrgs" xml:space="preserve">
    <value>Querying user organizations</value>
  </data>
  <data name="Sync_QueryingUserOrgsFailed" xml:space="preserve">
    <value>:cross_mark: Could not query GitHub for user organizations.</value>
  </data>
  <data name="Sync_QueryingUserOrgSponsorships" xml:space="preserve">
    <value>Querying organization sponsorships</value>
  </data>
  <data name="Sync_QueryingUserSponsorships" xml:space="preserve">
    <value>Querying user sponsorships</value>
  </data>
  <data name="Sync_QueryingUserSponsorshipsFailed" xml:space="preserve">
    <value>:cross_mark: Could not query GitHub for user sponsorships.</value>
  </data>
  <data name="Sync_Synchronizing" xml:space="preserve">
    <value>Synchronizing [yellow]{sponsorable}[/] sponsorship...</value>
  </data>
  <data name="Sync_SynchronizingProgress" xml:space="preserve">
    <value>Synchronizing [yellow]{sponsorable}[/]: {progress}</value>
  </data>  
  <data name="Sync_Signing" xml:space="preserve">
    <value>Requesting manifest signing ...</value>
  </data>
  <data name="Sync_Thanks" xml:space="preserve">
    <value>:check_mark_button: [lime]{sponsorable}[/]: thanks for sponsoring 💟</value>
  </data>
  <data name="Sync_AutoSync" xml:space="preserve">
    <value>[lime]?[/] Do you want to enable [link=https://www.devlooped.com/SponsorLink/github.html#auto-sync][blue]auto sync[/][/] of expired manifests?</value>
  </data>
  <data name="Sync_AutoSyncEnabled" xml:space="preserve">
    <value>:information: Sponsor manifests [link=https://www.devlooped.com/SponsorLink/github.html#auto-sync][blue]auto sync[/][/] was [lime]enabled[/]</value>
  </data>	
  <data name="Sync_AutoSyncDisabled" xml:space="preserve">
    <value>:information: Sponsor manifests [link=https://www.devlooped.com/SponsorLink/github.html#auto-sync][blue]auto sync[/][/] was [yellow]disabled[/]</value>
  </data>	
  <data name="Variables_Cleared" xml:space="preserve">
    <value>:check_mark_button: Cleared {0} user environment variable</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="Validate_Validating" xml:space="preserve">
    <value>Validating sponsor manifests</value>
  </data>
  <data name="Validate_ValidatingManifest" xml:space="preserve">
    <value>Validating sponsor manifest [dim]{path}[/]</value>
  </data>
  <data name="Validate_EmptyManifest" xml:space="preserve">
    <value>:cross_mark: [lime]{sponsorable}[/]: deleted manifest at [dim]{path}[/] because it was empty</value>
  </data>
  <data name="Validate_NoManifest" xml:space="preserve">
    <value>:cross_mark: [lime]{sponsorable}[/]: failed to retrieve issuer manifest JWT from {url}</value>
  </data>
  <data name="Validate_NoPublicKey" xml:space="preserve">
    <value>:cross_mark: [lime]{sponsorable}[/]: missing 'pub' public key claim from issuer manifest</value>
  </data>
  <data name="Validate_ValidExpires" xml:space="preserve">
    <value>:check_mark_button: [lime]{sponsorable}[/]: manifest is valid, expires on {date} [dim](roles: {roles})[/]</value>
  </data>
  <data name="Validate_InvalidExpired" xml:space="preserve">
    <value>:cross_mark: [lime]{sponsorable}[/]: manifest expired on {date}. Run [yellow]gh sponsors sync[/] to generate a new one.</value>
  </data>
  <data name="Validate_InvalidSignature" xml:space="preserve">
    <value>:cross_mark: [lime]{sponsorable}[/]: manifest signature is invalid. Run [yellow]gh sponsors sync[/] to generate a new one</value>
  </data>
  <data name="Validate_Invalid" xml:space="preserve">
    <value>:cross_mark: [lime]{sponsorable}[/]: manifest is invalid. Run [yellow]gh sponsors sync[/] to generate a new one</value>
  </data>
  <data name="Sync_UnattendedWithInteractiveAuth" xml:space="preserve">
    <value>[lime]?[/] Sponsors account [yellow]{account}[/] requires [link=https://www.devlooped.com/SponsorLink/github.html#authentication][blue]interactive authentication[/][/] for synchronization. Please run [yellow]gh sponsors sync {account}[/] interactively.</value>
  </data>
</root>