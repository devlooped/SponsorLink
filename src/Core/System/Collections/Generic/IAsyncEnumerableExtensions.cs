// <auto-generated />
#region License
// MIT License
// 
// Copyright (c) Daniel Cazzulino
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#nullable enable
using System.Threading.Tasks;

namespace System.Collections.Generic
{
    /// <summary>
    /// Async versions of common <see cref="IEnumerable{T}"/> extension methods.
    /// </summary>
    static partial class IAsyncEnumerableExtensions
    {
        /// <summary>
        /// Asynchronously creates an array from an <see cref="IQueryable{T}"/> which implements 
        /// <see cref="IAsyncEnumerable{T}"/>.
        /// </summary>
        /// <exception cref="ArgumentException">The <paramref name="source"/> does not implement 
        /// <see cref="IAsyncEnumerable{T}"/>.</exception>
        public static async Task<TSource[]> ToArrayAsync<TSource>(this IAsyncEnumerable<TSource> source)
            => (await ToListAsync(source)).ToArray();

        /// <summary>
        /// Asynchronously creates an dictionary from an <see cref="IQueryable{T}"/> which implements 
        /// <see cref="IAsyncEnumerable{T}"/>, according to a specified key selector function.
        /// </summary>
        /// <exception cref="ArgumentException">The <paramref name="source"/> does not implement 
        /// <see cref="IAsyncEnumerable{T}"/>.</exception>
        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IAsyncEnumerable<TSource> source, Func<TSource, TKey> keySelector) where TKey : notnull
            => ToDictionaryAsync(source, keySelector, x => x, null);

        /// <summary>
        /// Asynchronously creates an dictionary from an <see cref="IQueryable{T}"/> which implements 
        /// <see cref="IAsyncEnumerable{T}"/>, according to a specified key selector function and key comparer.
        /// </summary>
        /// <exception cref="ArgumentException">The <paramref name="source"/> does not implement 
        /// <see cref="IAsyncEnumerable{T}"/>.</exception>
        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IAsyncEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) where TKey : notnull
            => ToDictionaryAsync(source, keySelector, x => x, comparer);

        /// <summary>
        /// Asynchronously creates an dictionary from an <see cref="IQueryable{T}"/> which implements 
        /// <see cref="IAsyncEnumerable{T}"/>, according to specified key selector and element selector functions.
        /// </summary>
        /// <exception cref="ArgumentException">The <paramref name="source"/> does not implement 
        /// <see cref="IAsyncEnumerable{T}"/>.</exception>
        public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IAsyncEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) where TKey : notnull
            => ToDictionaryAsync(source, keySelector, elementSelector, null);

        /// <summary>
        /// Asynchronously creates an dictionary from an <see cref="IQueryable{T}"/> which implements 
        /// <see cref="IAsyncEnumerable{T}"/>, according to a specified key selector function, a comparer, 
        /// and an element selector function.
        /// </summary>
        /// <exception cref="ArgumentException">The <paramref name="source"/> does not implement 
        /// <see cref="IAsyncEnumerable{T}"/>.</exception>
        public static async Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(
            this IAsyncEnumerable<TSource> source, Func<TSource, TKey> keySelector,
            Func<TSource, TElement> elementSelector, IEqualityComparer<TKey>? comparer) where TKey : notnull
        {
            var dictionary = new Dictionary<TKey, TElement>(comparer);
            await foreach (var item in source)
                dictionary.Add(keySelector(item), elementSelector(item));

            return dictionary;
        }

        /// <summary>
        /// Asynchronously creates an <see cref="HashSet{T}"/> from an <see cref="IQueryable{T}"/> which implements 
        /// <see cref="IAsyncEnumerable{T}"/>.
        /// </summary>
        /// <exception cref="ArgumentException">The <paramref name="source"/> does not implement 
        /// <see cref="IAsyncEnumerable{T}"/>.</exception>
        public static Task<HashSet<TSource>> ToHashSetAsync<TSource>(this IAsyncEnumerable<TSource> source)
            => ToHashSetAsync(source, null);

        /// <summary>
        /// Asynchronously creates an <see cref="HashSet{T}"/> from an <see cref="IQueryable{T}"/> which implements 
        /// <see cref="IAsyncEnumerable{T}"/>, using the comparer to compare keys.
        /// </summary>
        /// <exception cref="ArgumentException">The <paramref name="source"/> does not implement 
        /// <see cref="IAsyncEnumerable{T}"/>.</exception>
        public static async Task<HashSet<TSource>> ToHashSetAsync<TSource>(this IAsyncEnumerable<TSource> source, IEqualityComparer<TSource>? comparer)
        {
            var set = new HashSet<TSource>(comparer);
            await foreach (var item in source)
                set.Add(item);

            return set;
        }

        /// <summary>
        /// Asynchronously creates an <see cref="IList{T}"/> from an <see cref="IQueryable{T}"/> which implements 
        /// <see cref="IAsyncEnumerable{T}"/>, according to a specified key selector function.
        /// </summary>
        /// <exception cref="ArgumentException">The <paramref name="source"/> does not implement 
        /// <see cref="IAsyncEnumerable{T}"/>.</exception>
        public static async Task<List<TSource>> ToListAsync<TSource>(this IAsyncEnumerable<TSource> source)
        {
            var list = new List<TSource>();
            await foreach (var item in source)
                list.Add(item);

            return list;
        }
    }
}
