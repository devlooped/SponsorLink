<Project>

  <PropertyGroup>
    <!-- Used in RunResolvePackageDependencies to emit items we use to detect transitive deps -->
    <EmitLegacyAssetsFileItems>true</EmitLegacyAssetsFileItems>
    <BuildingInsideVisualStudio>false</BuildingInsideVisualStudio>
    <BuildingInsideVisualStudio Condition="$(ServiceHubLogSessionKey) != '' or $(VSAPPIDNAME) != '' or $(IDEA_INITIAL_DIRECTORY) != '' or $(RESHARPER_FUS_BUILD) != '' or $(RESHARPER_FUS_SESSION) != ''">true</BuildingInsideVisualStudio>
  </PropertyGroup>

  <ItemGroup>
    <!-- By adding these items in .targets, we make it harder to break from tweaks in the project file -->
    <CompilerVisibleItemMetadata Include="AdditionalFiles" MetadataName="SourceItemType" />
    <CompilerVisibleItemMetadata Include="AdditionalFiles" MetadataName="SourceIdentity" />
    <CompilerVisibleItemMetadata Include="AdditionalFiles" MetadataName="NuGetPackageId" />
    <CompilerVisibleItemMetadata Include="AdditionalFiles" MetadataName="ParentPackage" />

    <!-- These are required properties without which the analyzer fails with build errors -->
    <CompilerVisibleProperty Include="DesignTimeBuild" />
    <CompilerVisibleProperty Include="MSBuildProjectFullPath" />

    <CompilerVisibleProperty Include="DebugSponsorLink" />
  </ItemGroup>

  <Target Name="CollectPackageDependencies"
          Condition="'$(UsingMicrosoftNETSdk)' == 'true'"
          BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun"
          DependsOnTargets="RunResolvePackageDependencies" />

  <!-- NOTE: these targets will never emit any additional files for analyers unless there are @(SponsorablePackageId) items
       Sponsorable packages must provide this if they want to opt-in to the quiet-days behavior as well as the non-transitive 
       checks. -->
  <Target Name="CollectSponsorableDependencies"
          BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun"
          DependsOnTargets="CollectPackageDependencies"
			    Inputs="@(SponsorablePackageId)"
			    Outputs="|%(SponsorablePackageId.Identity)|">

    <PropertyGroup>
      <SponsorablePackageId>%(SponsorablePackageId.Identity)</SponsorablePackageId>
    </PropertyGroup>

    <ItemGroup>
      <!-- Used to determine InstallTime for quiet days calculation -->
      <AdditionalFiles Include="@(Analyzer -> WithMetadataValue('NuGetPackageId', '$(SponsorablePackageId)'))"
                       SourceItemType="Analyzer" NuGetPackageId="%(Analyzer.NuGetPackageId)" />

      <SponsorablePackageDependencies Include="@(PackageDependencies)"
											                Condition="$([MSBuild]::ValueOrDefault('%(PackageDependencies.Identity)', '').StartsWith('$(SponsorablePackageId)/'))" />

      <!-- Used to determine if the dependency is indirect, via the ParentPackage metadata -->
      <AdditionalFiles Include="@(SponsorablePackageDependencies)"
							         SourceItemType="PackageDependencies"
							         SourceIdentity="$(SponsorablePackageId)" />
    </ItemGroup>

  </Target>

  <Target Name="CollectSponsorLinkMessages" AfterTargets="CoreCompile">
    <ItemGroup>
      <SponsorLinkMessage Include="obj/SponsorLink/**/*.txt" />
    </ItemGroup>
  </Target>

  <Target Name="CleanSponsorLinkMessages" AfterTargets="Clean" DependsOnTargets="CollectSponsorLinkMessages">
    <Delete Files="@(SponsorLinkMessage)" />
  </Target>

  <Target Name="SponsorLinkMessages" AfterTargets="CoreCompile" DependsOnTargets="CollectSponsorLinkMessages"
          Condition="'$(BuildingInsideVisualStudio)' == 'true' and '$(DesignTimeBuild)' != 'true'"
          Inputs="@(SponsorLinkMessage)" Outputs="|%(SponsorLinkMessage.Identity)|">

    <PropertyGroup>
      <SponsorLinkFilename>%(SponsorLinkMessage.Filename)%(SponsorLinkMessage.Extension)</SponsorLinkFilename>
      <SponsorLinkDiagnosticId>$(SponsorLinkFilename.Substring(0, 4))</SponsorLinkDiagnosticId>
      <SponsorLinkNoWarn>false</SponsorLinkNoWarn>
      <SponsorLinkNoWarn Condition="$(NoWarn.Contains('$(SponsorLinkDiagnosticId)'))">true</SponsorLinkNoWarn>
      <SponsorLinkMessageImportance>normal</SponsorLinkMessageImportance>
      <SponsorLinkMessageImportance Condition="$(SponsorLinkFilename.Contains('.low.'))">low</SponsorLinkMessageImportance>
      <SponsorLinkMessageImportance Condition="$(SponsorLinkFilename.Contains('.high.'))">high</SponsorLinkMessageImportance>
    </PropertyGroup>

    <!-- We always read info since we want the thanks to be seen :) -->
    <ReadLinesFromFile File="@(SponsorLinkMessage)" Condition="$(SponsorLinkNoWarn) or $(SponsorLinkFilename.Contains('.Info.'))">
      <Output TaskParameter="Lines" ItemName="SponsorLinkMessageLine"/>
    </ReadLinesFromFile>

    <!-- 🙏 Please, instead of disabling SponsorLink, consider supporting the ongoing development of 
         the  projects you depend on. This helps keep the community healthy and supports your fellow developers 
         make a living too. There is no minimum amount to sponsor, and you can cancel at any time. 
         It's available everywhere in the world, and you can sponsor anonymously if you prefer too!
         Learn more at https://github.com/sponsors. 
    -->
    <Error Text="@(SponsorLinkMessageLine, '')" Condition="$(SponsorLinkNoWarn) and $(SponsorLinkFilename.Contains('.Error.'))" />

    <!-- 🙏 Please, instead of disabling SponsorLink, consider supporting the ongoing development of 
         the  projects you depend on. This helps keep the community healthy and supports your fellow developers 
         make a living too. There is no minimum amount to sponsor, and you can cancel at any time. 
         It's available everywhere in the world, and you can sponsor anonymously if you prefer too!
         Learn more at https://github.com/sponsors. 
    -->
    <Warning Text="@(SponsorLinkMessageLine, '')" Condition="$(SponsorLinkNoWarn) and $(SponsorLinkFilename.Contains('.Warning.'))" />

    <!-- Always show info, since otherwise it's typically not visible anywhere, and we want the Thanks to be seen :) -->
    <Message Text="@(SponsorLinkMessageLine, '')" Importance="normal" Condition="$(SponsorLinkFilename.Contains('.Info.'))" />
  </Target>

  <!-- SponsorLink is typically consumed from a netstandard2.0 analyzer project, which by default won't copy-local 
       any of its runtime dependencies. But in order to properly load the analyzer when debugging as a roslyn component, 
       all dependencies need to exist alongside the analyzer project, so we need CopyLocal behavior always for SL. -->
  <!--
  <Target Name="CopyLocalSponsorLink" AfterTargets="ResolvePackageAssets" DependsOnTargets="ResolvePackageAssets">
    <ItemGroup>
      <ReferenceCopyLocalPaths Include="@(RuntimeCopyLocalItems -> WithMetadataValue('NuGetPackageId', 'Devlooped.SponsorLink'))" />
    </ItemGroup>
  </Target>-->

  <Target Name="SponsorLinkPackDefaults"
          BeforeTargets="InferPackageContents;GetPackageContents"
          Inputs="@(PackageReference -> WithMetadataValue('Identity', 'Devlooped.SponsorLink'))"
          Outputs="|%(PackageReference.Identity)|">
    <ItemGroup>
      <!-- TODO: do the equivalent for SDK Pack too. -->
      <PackageReference PrivateAssets="" PackInclude="build,buildTransitive,analyzers" PackExclude="compile,runtime" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <SponsorLinkImported>true</SponsorLinkImported>
  </PropertyGroup>

</Project>