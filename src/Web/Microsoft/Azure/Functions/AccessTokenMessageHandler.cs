// <auto-generated />
#region License
// MIT License
// 
// Copyright (c) Daniel Cazzulino
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#nullable enable

using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Microsoft.Azure.Functions.Worker;

/// <summary>
/// Automatically injects the current function invocation's access token into the outgoing http requests.
/// Requires <see cref="IFunctionContextAccessor"/>.
/// </summary>
/// <remarks>
/// Uses <see cref="IFunctionContextAccessor.FunctionContext"/> to retreive the 
/// <see cref="FunctionContext.Features"/>.Get(<see cref="AccessToken"/>) and sets it as 
/// a bearer token in the outgoing http requests.
/// </remarks>
public class AccessTokenMessageHandler(IFunctionContextAccessor context) : DelegatingHandler
{
    protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    {
        // NOTE: we don't use or check the token's expiration, if any, since we don't do refreshing either. 
        // We keep it simple here.
        if (context.FunctionContext?.Features.Get<AccessToken>() is { } token)
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Token);

        return base.SendAsync(request, cancellationToken);
    }
}