// <auto-generated />
#region License
// MIT License
// 
// Copyright (c) Daniel Cazzulino
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#nullable enable

using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Middleware;

namespace Microsoft.Extensions.Hosting;

/// <summary>
/// Sets the <see cref="ClaimsPrincipal.ClaimsPrincipalSelector"/> to a function 
/// that accesses the current <see cref="FunctionContext"/> by leveraging the 
/// <see cref="IFunctionContextAccessor"/> to retrieve the principal from 
/// the <see cref="FunctionContext.Features"/>, if present.
/// </summary>
public static partial class AppServiceAuthenticationExtensions
{
    /// <summary>
    /// Ensures that <see cref="ClaimsPrincipal.Current"/> accesses the principal 
    /// authenticated by the app service authentication middleware.
    /// </summary>
    public static IFunctionsWorkerApplicationBuilder UseClaimsPrincipal(this IFunctionsWorkerApplicationBuilder builder)
    {
        // The function context accessor must run before the principal middleware.
        builder.UseFunctionContextAccessor();
        builder.UseMiddleware<ClaimsPrincipalMiddleware>();
        return builder;
    }

    class ClaimsPrincipalMiddleware(IFunctionContextAccessor contextAccessor) : IFunctionsWorkerMiddleware
    {
        static readonly ClaimsPrincipal empty = new(new ClaimsIdentity());

        public async Task Invoke(FunctionContext context, FunctionExecutionDelegate next)
        {
            // NOTE: we only set this once, and we don't use the *current* function invocation 
            // because the principal selector is a static property that is reused across all threads, 
            // so we cannot rely on the captured current context.
            ClaimsPrincipal.ClaimsPrincipalSelector ??= () 
                => contextAccessor.FunctionContext?.Features.Get<ClaimsPrincipal>() ?? empty;

            await next(context);
        }
    }
}