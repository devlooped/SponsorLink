// <auto-generated />
#region License
// MIT License
// 
// Copyright (c) Daniel Cazzulino
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#nullable enable

using System;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker.Middleware;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;

namespace Microsoft.Extensions.Hosting
{
    /// <summary>
    /// Adds error logging to the function pipeline.
    /// </summary>
    public static class ErrorLoggingMiddlewareExtensions
    {
        /// <summary>
        /// Adds the <see cref="ErrorLoggingMiddleware"/> middleware to the functions pipeline.
        /// </summary>
        public static IFunctionsWorkerApplicationBuilder UseErrorLogging(this IFunctionsWorkerApplicationBuilder builder)
            => builder.UseMiddleware<ErrorLoggingMiddleware>();
    }
}

namespace Microsoft.Azure.Functions.Worker.Middleware
{
    /// <summary>
    /// A middleware that logs exceptions.
    /// </summary>
    public class ErrorLoggingMiddleware : IFunctionsWorkerMiddleware
    {
        public async Task Invoke(FunctionContext context, FunctionExecutionDelegate next)
        {
            try
            {
                await next(context);
            }
            catch (Exception e)
            {
                var logger = context.GetLogger<ErrorLoggingMiddleware>();
                logger.LogError(e, "Exception: {Exception}", e.ToString());
                throw;
            }
        }
    }
}