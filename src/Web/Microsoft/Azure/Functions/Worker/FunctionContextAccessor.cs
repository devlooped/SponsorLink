// <auto-generated />
#region License
// MIT License
// 
// Copyright (c) Daniel Cazzulino
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#nullable enable

using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Middleware;
using Microsoft.Extensions.DependencyInjection;

// Follows implementation of HttpContextAccessor at https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http/src/HttpContextAccessor.cs

namespace Microsoft.Azure.Functions.Worker
{
    /// <summary>
    /// Provides access to the current <see cref="FunctionContext"/>, if one is available.
    /// </summary>
    public interface IFunctionContextAccessor
    {
        /// <summary>
        /// Gets or sets the current <see cref="FunctionContext"/>. 
        /// Returns <see langword="null" /> if there is no active <see cref="FunctionContext" />.
        /// </summary>
        FunctionContext? FunctionContext { get; set; }
    }
}

namespace Microsoft.Extensions.Hosting
{
    /// <summary>
    /// Extension method to allow access to the current <see cref="FunctionContext"/> 
    /// from dependency injection.
    /// </summary>
    public static class FunctionContextAccessorExtensions
    {
        /// <summary>
        /// Adds a default implementation for the <see cref="IFunctionContextAccessor"/> service.
        /// </summary>
        public static IFunctionsWorkerApplicationBuilder UseFunctionContextAccessor(this IFunctionsWorkerApplicationBuilder builder)
        {
            builder.UseMiddleware<FunctionContextAccessorMiddleware>();
            builder.Services.AddSingleton<IFunctionContextAccessor, FunctionContextAccessor>();
            return builder;
        }
    }

    [DebuggerDisplay("FunctionContext = {FunctionContext}")]
    class FunctionContextAccessor : IFunctionContextAccessor
    {
        static readonly AsyncLocal<FunctionContextHolder> current = new AsyncLocal<FunctionContextHolder>();

        public virtual FunctionContext? FunctionContext
        {
            get => current.Value?.Context;
            set
            {
                var holder = current.Value;
                if (holder != null)
                {
                    // Clear current context trapped in the AsyncLocals, as its done.
                    holder.Context = default;
                }

                if (value != null)
                {
                    // Use an object indirection to hold the context in the AsyncLocal,
                    // so it can be cleared in all ExecutionContexts when its cleared.
                    current.Value = new FunctionContextHolder { Context = value };
                }
            }
        }

        class FunctionContextHolder
        {
            public FunctionContext? Context;
        }
    }

    class FunctionContextAccessorMiddleware(IFunctionContextAccessor accessor) : IFunctionsWorkerMiddleware
    {
        public Task Invoke(FunctionContext context, FunctionExecutionDelegate next)
        {
            accessor.FunctionContext = context;
            return next(context);
        }
    }
}